var documenterSearchIndex = {"docs":
[{"location":"param_retrieval/#Basic-Parameter-Retrieval","page":"Parameter retrieval","title":"Basic Parameter Retrieval","text":"","category":"section"},{"location":"param_retrieval/","page":"Parameter retrieval","title":"Parameter retrieval","text":"There are two keys functions for parameter retrieval:","category":"page"},{"location":"param_retrieval/","page":"Parameter retrieval","title":"Parameter retrieval","text":"create_toml_dict constructs a TOML dictionary which stores parameters,\nget_parameter_values retrieves parameters from the TOML dictionary.","category":"page"},{"location":"param_retrieval/","page":"Parameter retrieval","title":"Parameter retrieval","text":"To construct a TOML dictionary, pass in the desired floating point type.  This will source parameter values from the global default list stored in src/parameters.toml","category":"page"},{"location":"param_retrieval/","page":"Parameter retrieval","title":"Parameter retrieval","text":"import ClimaParams as CP\ntoml_dict = CP.create_toml_dict(Float64)","category":"page"},{"location":"param_retrieval/","page":"Parameter retrieval","title":"Parameter retrieval","text":"To retrieve parameters, pass in the TOML dictionary and the names that match the default parameters.","category":"page"},{"location":"param_retrieval/","page":"Parameter retrieval","title":"Parameter retrieval","text":"params = CP.get_parameter_values(toml_dict, [\"gravitational_acceleration\", \"gas_constant\"])\nparams.gravitational_acceleration\nparams.gas_constant","category":"page"},{"location":"param_retrieval/","page":"Parameter retrieval","title":"Parameter retrieval","text":"You can also pass in a single parameter name:","category":"page"},{"location":"param_retrieval/","page":"Parameter retrieval","title":"Parameter retrieval","text":"params = CP.get_parameter_values(toml_dict, \"gravitational_acceleration\")\nparams.gravitational_acceleration","category":"page"},{"location":"param_retrieval/#Name-Maps","page":"Parameter retrieval","title":"Name Maps","text":"","category":"section"},{"location":"param_retrieval/","page":"Parameter retrieval","title":"Parameter retrieval","text":"Name maps are a way to map global descriptive parameter names (indexing the toml_dict)  to local user-defined names. One can define a name with a NamedTuple as follows... It will return a NamedTuple of the parameters with your given variable names.","category":"page"},{"location":"param_retrieval/","page":"Parameter retrieval","title":"Parameter retrieval","text":"name_map = (;\n    :gravitational_acceleration => :g,\n    :angular_velocity_planet_rotation => :omega\n)\nparams = CP.get_parameter_values(toml_dict, name_map)\nparams.g  # gives value field of gravitational_acceleration\nparams.omega","category":"page"},{"location":"param_retrieval/","page":"Parameter retrieval","title":"Parameter retrieval","text":"A name map does not strictly need to be a NamedTuple. It can be a Dict, Vector, Tuple, or Varargs of Pairs. The entries in the name map can also be Strings instead of Symbols.","category":"page"},{"location":"param_retrieval/","page":"Parameter retrieval","title":"Parameter retrieval","text":"name_map = Dict(\"gravitational_acceleration\" => \"g\", \"angular_velocity_planet_rotation\" => \"omega\")\nparams = CP.get_parameter_values(toml_dict, name_map)\n\nparams = CP.get_parameter_values(toml_dict, :gravitational_acceleration => :g,\n                                            :angular_velocity_planet_rotation => :omega)","category":"page"},{"location":"param_retrieval/#Example-Usage","page":"Parameter retrieval","title":"Example Usage","text":"","category":"section"},{"location":"param_retrieval/#An-example-from-Thermodynamics.jl","page":"Parameter retrieval","title":"An example from Thermodynamics.jl","text":"","category":"section"},{"location":"param_retrieval/#In-the-user-facing-driver-file","page":"Parameter retrieval","title":"In the user-facing driver file","text":"","category":"section"},{"location":"param_retrieval/","page":"Parameter retrieval","title":"Parameter retrieval","text":"import ClimaParams\nusing Thermodynamics\n\nthermo_params = ThermodynamicsParameters(Float64)","category":"page"},{"location":"param_retrieval/#In-the-source-code-for-Thermodynamics.jl","page":"Parameter retrieval","title":"In the source code for Thermodynamics.jl","text":"","category":"section"},{"location":"param_retrieval/","page":"Parameter retrieval","title":"Parameter retrieval","text":"Base.@kwdef struct ThermodynamicsParameters{FT}\n    gas_constant::FT\n    molmass_dryair::FT\n    ...\n    # derived parameters\n    R_d::FT = gas_constant / molmass_dryair\nend","category":"page"},{"location":"param_retrieval/","page":"Parameter retrieval","title":"Parameter retrieval","text":"The struct is parameterized by {FT} which is a user-determined float precision.\nOnly relevant parameters used in Thermodynamics are stored here.\nA keyword based constructor is provided so we do not rely on parameter order.","category":"page"},{"location":"param_retrieval/","page":"Parameter retrieval","title":"Parameter retrieval","text":"The constructor is as follows","category":"page"},{"location":"param_retrieval/","page":"Parameter retrieval","title":"Parameter retrieval","text":"# Float-type constructor\nThermodynamicsParameters(::Type{FT}) = ThermodynamicsParameters(CP.create_toml_dict(FT))\n\n# TOML dictionary constructor\nfunction ThermodynamicsParameters(toml_dict)\n    name_map = [\n        :temperature_triple_point => :T_triple,\n        :adiabatic_exponent_dry_air => :kappa_d,\n        :pressure_triple_point => :press_triple,\n        :thermodynamics_temperature_reference => :T_0,\n        :temperature_water_freeze => :T_freeze,\n        :isobaric_specific_heat_ice => :cp_i,\n        ...\n    ]\n\n    parameters = ClimaParams.get_parameter_values(\n        toml_dict,\n        name_map,\n        \"Thermodynamics\",\n    )\n\n    FT = CP.float_type(toml_dict)\n    return ThermodynamicsParameters{FT}(parameters...)\nend","category":"page"},{"location":"param_retrieval/","page":"Parameter retrieval","title":"Parameter retrieval","text":"The constructor takes in a toml_dict produced from reading the TOML file.\nThe name map maps from the globally-defined parameter names to the user-defined names. \nWe obtain the NamedTuple parameters from get_parameter_values(toml_dict, name_map, component_name) The component_name is a string used for the parameter log.\nWe return the ThermodynamicsParameters{FT}, where FT is an enforced float type (e.g. single or double precision).","category":"page"},{"location":"param_retrieval/#An-example-with-modular-components-from-CloudMicrophysics.jl","page":"Parameter retrieval","title":"An example with modular components from CloudMicrophysics.jl","text":"","category":"section"},{"location":"param_retrieval/#In-the-user-facing-driver-file-2","page":"Parameter retrieval","title":"In the user-facing driver file","text":"","category":"section"},{"location":"param_retrieval/","page":"Parameter retrieval","title":"Parameter retrieval","text":"Here we build a CloudMicrophysics parameter set. In this case, the user wishes to use a 0-moment microphysics parameterization scheme.","category":"page"},{"location":"param_retrieval/","page":"Parameter retrieval","title":"Parameter retrieval","text":"import ClimaParams\nimport Thermodynamics\nimport CloudMicrophysics\n\n#load defaults\ntoml_dict = ClimaParams.create_toml_dict(Float64)\n\n#build the low level parameter set\nparam_therm = Thermodynamics.Parameters.ThermodynamicsParameters(toml_dict)\nparam_0M = CloudMicrophysics.Microphysics_0M_Parameters(toml_dict)\n\n#build the hierarchical parameter set\nparameter_set = CloudMicrophysics.CloudMicrophysicsParameters(\n    toml_dict,\n    param_0M,\n    param_therm\n)","category":"page"},{"location":"param_retrieval/","page":"Parameter retrieval","title":"Parameter retrieval","text":"note: Note\nThe exact APIs here are subject to change.","category":"page"},{"location":"param_retrieval/#In-the-source-code-for-CloudMicrophysics.jl","page":"Parameter retrieval","title":"In the source code for CloudMicrophysics.jl","text":"","category":"section"},{"location":"param_retrieval/","page":"Parameter retrieval","title":"Parameter retrieval","text":"Build the different options for a Microphysics parameterizations","category":"page"},{"location":"param_retrieval/","page":"Parameter retrieval","title":"Parameter retrieval","text":"abstract type AbstractMicrophysicsParameters end\nstruct NoMicrophysicsParameters <: AbstractMicrophysicsParameters end\nBase.@kwdef struct Microphysics_0M_Parameters{FT} <: AbstractMicrophysicsParameters\n    Ï„_precip::FT\n    qc_0::FT\n    S_0::FT\nend\nBase.@kwdef struct Microphysics_1M_Parameters{FT} <: AbstractMicrophysicsParameters\n    ...\nend","category":"page"},{"location":"param_retrieval/","page":"Parameter retrieval","title":"Parameter retrieval","text":"We omit their constructors (see above). The CloudMicrophysics parameter set is built likewise","category":"page"},{"location":"param_retrieval/","page":"Parameter retrieval","title":"Parameter retrieval","text":"Base.@kwdef struct CloudMicrophysicsParameters{FT, AMPS <: AbstractMicrophysicsParameters}\n    K_therm::FT\n    ...\n    MPS::AMPS\n    TPS::ThermodynamicsParameters{FT}\nend\n\n\nfunction CloudMicrophysicsParameters(\n    toml_dict,\n    MPS::AMPS,\n    TPS::ThermodynamicsParameters{FT},\n) where {FT, AMPS <: AbstractMicrophysicsParameters}\n\n    parameter_names = [ \"K_therm\", ... ]\n\n    parameters  = ClimaParams.get_parameter_values(\n        toml_dict,\n        parameter_names,\n        \"CloudMicrophysics\",\n    )\n\n    return CloudMicrophysicsParameters{FT, AMPS}(;\n            parameters...,\n            MPS,  # Nested parameter struct\n            TPS,  # Nested parameter struct\n        )\nend","category":"page"},{"location":"param_retrieval/#Parameters-as-functions","page":"Parameter retrieval","title":"Parameters-as-functions","text":"","category":"section"},{"location":"param_retrieval/","page":"Parameter retrieval","title":"Parameter retrieval","text":"note: Note\nThe exact APIs here are subject to change.","category":"page"},{"location":"param_retrieval/","page":"Parameter retrieval","title":"Parameter retrieval","text":"When building the model components, parameters are extracted by calling param_set.name","category":"page"},{"location":"param_retrieval/","page":"Parameter retrieval","title":"Parameter retrieval","text":"function example_cloudmicrophysics_func(param_set::CloudMicrophysicsParameters,...)\n    K_therm = param_set.K_therm\n    ...\nend","category":"page"},{"location":"param_retrieval/","page":"Parameter retrieval","title":"Parameter retrieval","text":"These parameters can be made into functions for added flexibility.","category":"page"},{"location":"param_retrieval/","page":"Parameter retrieval","title":"Parameter retrieval","text":"K_therm(param_set) = param_set.K_therm","category":"page"},{"location":"param_retrieval/","page":"Parameter retrieval","title":"Parameter retrieval","text":"This can be useful for derived parameters,","category":"page"},{"location":"param_retrieval/","page":"Parameter retrieval","title":"Parameter retrieval","text":"derived_param(param_set) = param_set.param1 * param_set.param2","category":"page"},{"location":"param_retrieval/","page":"Parameter retrieval","title":"Parameter retrieval","text":"or to forward parameters from nested parameter structs:","category":"page"},{"location":"param_retrieval/","page":"Parameter retrieval","title":"Parameter retrieval","text":"forwarded_param(ps::ParamSet) = ps.nested_params.forwarded_param","category":"page"},{"location":"param_retrieval/","page":"Parameter retrieval","title":"Parameter retrieval","text":"Functions can be autogenerated using @eval:","category":"page"},{"location":"param_retrieval/","page":"Parameter retrieval","title":"Parameter retrieval","text":"for fn in fieldnames(ParamSet)\n    @eval $(fn)(ps::ParamSet) = ps.$(fn)\nend","category":"page"},{"location":"toml/#The-TOML-parameter-file-interface","page":"TOML file interface","title":"The TOML parameter file interface","text":"","category":"section"},{"location":"toml/","page":"TOML file interface","title":"TOML file interface","text":"The complete user interface consists of two files in TOML format","category":"page"},{"location":"toml/","page":"TOML file interface","title":"TOML file interface","text":"A user-defined experiment file - in the local experiment directory\nA defaults file - in src/ directory of ClimaParams.jl","category":"page"},{"location":"toml/#Parameter-style-guide","page":"TOML file interface","title":"Parameter style-guide","text":"","category":"section"},{"location":"toml/","page":"TOML file interface","title":"TOML file interface","text":"A parameter is determined by its unique name. It has possible attributes","category":"page"},{"location":"toml/","page":"TOML file interface","title":"TOML file interface","text":"value\ntype\ndescription\nprior\ntag\ntransformation","category":"page"},{"location":"toml/","page":"TOML file interface","title":"TOML file interface","text":"warn: Warn\nCurrently we support types: float, integer, string and bool. Array types are designated by the same type as singleton types.","category":"page"},{"location":"toml/#Minimal-parameter-requirement-to-run-in-CliMA","page":"TOML file interface","title":"Minimal parameter requirement to run in CliMA","text":"","category":"section"},{"location":"toml/","page":"TOML file interface","title":"TOML file interface","text":"[molar_mass_dry_air]\nvalue = 0.03\ntype = \"float\"","category":"page"},{"location":"toml/#A-more-informative-parameter-(e.g.-found-in-the-defaults-file)","page":"TOML file interface","title":"A more informative parameter (e.g. found in the defaults file)","text":"","category":"section"},{"location":"toml/","page":"TOML file interface","title":"TOML file interface","text":"[molar_mass_dry_air]\nvalue = 0.02897\ntype = \"float\"\ndescription = \"Molecular weight dry air (kg/mol)\"","category":"page"},{"location":"toml/#Properly-tagged-parameter","page":"TOML file interface","title":"Properly tagged parameter","text":"","category":"section"},{"location":"toml/","page":"TOML file interface","title":"TOML file interface","text":"To add a tag to a parameter, set the tag field with a list of tags. Tags are an optional convenience and do not create a namespace. All parameter names must be unique.","category":"page"},{"location":"toml/","page":"TOML file interface","title":"TOML file interface","text":"As an initial convention, parameters will be tagged with the component(s) in which they are used. This convention will be changed as we see how packages use tags.","category":"page"},{"location":"toml/","page":"TOML file interface","title":"TOML file interface","text":"[prandtl_number_0_grachev]\nvalue = 0.98\ntype = \"float\"\ndescription = \"Pr_0 for Grachev universal functions. From Grachev et al, 2007. DOI: 10.1007/s10546-007-9177-6\"\ntag = [\"SurfaceFluxes\"]","category":"page"},{"location":"toml/","page":"TOML file interface","title":"TOML file interface","text":"If this convention is followed, to obtain the parameters used to build tagged by \"surfacefluxes\", one could call for example:","category":"page"},{"location":"toml/","page":"TOML file interface","title":"TOML file interface","text":"surfacefluxes_params = get_tagged_parameter_values(toml_dict, \"surfacefluxes\")","category":"page"},{"location":"toml/","page":"TOML file interface","title":"TOML file interface","text":"To match tags, punctuation and capitalization is removed. For more information, see fuzzy_match.","category":"page"},{"location":"toml/#A-more-complex-parameter-for-calibration","page":"TOML file interface","title":"A more complex parameter for calibration","text":"","category":"section"},{"location":"toml/","page":"TOML file interface","title":"TOML file interface","text":"[neural_net_entrainment]\nvalue = [0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0]\ntype = \"float\"\ndescription = \"NN weights to represent the non-dimensional entrainment function\"\nprior = \"MvNormal(0,I)\"","category":"page"},{"location":"toml/#Interaction-of-the-files","page":"TOML file interface","title":"Interaction of the files","text":"","category":"section"},{"location":"toml/","page":"TOML file interface","title":"TOML file interface","text":"On read an experiment file, the default file is also read and any duplicate parameter attributes are overwritten e.g. If the minimal example above was loaded from an experiment file, and the informative example above was in the defaults file, then the loaded parameter would look as follows:","category":"page"},{"location":"toml/","page":"TOML file interface","title":"TOML file interface","text":"[molar_mass_dry_air]\nvalue = 0.03\ntype = \"float\"\ndescription = \"Molecular weight dry air (kg/mol)\"","category":"page"},{"location":"toml/","page":"TOML file interface","title":"TOML file interface","text":"Here, the value field has been overwritten by the experiment value.","category":"page"},{"location":"toml/#File-and-parameter-interaction-with-CliMA","page":"TOML file interface","title":"File and parameter interaction with CliMA","text":"","category":"section"},{"location":"toml/","page":"TOML file interface","title":"TOML file interface","text":"ClimaParams.jl provides several methods to parse, merge, and log parameter information.","category":"page"},{"location":"toml/#Loading-from-file","page":"TOML file interface","title":"Loading from file","text":"","category":"section"},{"location":"toml/","page":"TOML file interface","title":"TOML file interface","text":"We provide the following methods to load parameters from file","category":"page"},{"location":"toml/","page":"TOML file interface","title":"TOML file interface","text":"create_toml_dict(Float64; override_filepath, default_filepath)\ncreate_toml_dict(Float64; override_filepath)","category":"page"},{"location":"toml/","page":"TOML file interface","title":"TOML file interface","text":"The Float64 (or Float32) defines the requested precision of the returned parameters.","category":"page"},{"location":"toml/","page":"TOML file interface","title":"TOML file interface","text":"Typical usage involves passing the local parameter file","category":"page"},{"location":"toml/","page":"TOML file interface","title":"TOML file interface","text":"import ClimaParams\nlocal_experiment_file = joinpath(@__DIR__,\"local_exp_parameters.toml\")\ntoml_dict = ClimaParams.create_toml_dict(; override_file = local_experiment_file)","category":"page"},{"location":"toml/","page":"TOML file interface","title":"TOML file interface","text":"If no file is passed it will use only the defaults from ClimaParams.jl (causing errors if required parameters are not within this list).","category":"page"},{"location":"toml/","page":"TOML file interface","title":"TOML file interface","text":"You can also pass Julia Dicts directly to override_filepath and default_filepath.","category":"page"},{"location":"toml/","page":"TOML file interface","title":"TOML file interface","text":"If you want to use more than two TOML files, you can merge them with merge_toml_files(filepaths...). By default, duplicate TOML entries are not allowed, but this can be changed by setting override = true.","category":"page"},{"location":"toml/","page":"TOML file interface","title":"TOML file interface","text":"The parameter dict is then used to build the codebase (see Parameter Retrieval for usage and examples).","category":"page"},{"location":"toml/#Logging-parameters","page":"TOML file interface","title":"Logging parameters","text":"","category":"section"},{"location":"toml/","page":"TOML file interface","title":"TOML file interface","text":"Once the CliMA components are built, it is important to log the parameters. We provide the following method","category":"page"},{"location":"toml/","page":"TOML file interface","title":"TOML file interface","text":"log_parameter_information(toml_dict, filepath; strict=false)","category":"page"},{"location":"toml/","page":"TOML file interface","title":"TOML file interface","text":"Typical usage will be after building components and before running","category":"page"},{"location":"toml/","page":"TOML file interface","title":"TOML file interface","text":"import Thermodynamics\ntherm_params = Thermodynamics.ThermodynamicsParameters(toml_dict)\n#... build(thermodynamics model,therm_params)\n\nlog_file = joinpath(@__DIR__,\"parameter_log.toml\")\nClimaParams.log_parameter_information(toml_dict,log_file)\n\n# ... run(thermodynamics_model)","category":"page"},{"location":"toml/","page":"TOML file interface","title":"TOML file interface","text":"This function performs two tasks","category":"page"},{"location":"toml/","page":"TOML file interface","title":"TOML file interface","text":"It writes a parameter log file to log_file.\nIt performs parameter sanity checks.","category":"page"},{"location":"toml/","page":"TOML file interface","title":"TOML file interface","text":"Continuing our previous example, imagine molar_mass_dry_air was extracted in ThermodynamicsParameters. Then the log file will contain:","category":"page"},{"location":"toml/","page":"TOML file interface","title":"TOML file interface","text":"[molar_mass_dry_air]\nvalue = 0.03\ntype = \"float\"\ndescription = \"Molecular weight dry air (kg/mol)\"\nused_in = [\"Thermodynamics\"]","category":"page"},{"location":"toml/","page":"TOML file interface","title":"TOML file interface","text":"The additional attribute used_in displays every CliMA component that used this parameter.","category":"page"},{"location":"toml/","page":"TOML file interface","title":"TOML file interface","text":"note: Note\nLog files are written in TOML format, and can be read back into the model.","category":"page"},{"location":"toml/","page":"TOML file interface","title":"TOML file interface","text":"warn: Warn\nIt is assumed that all parameters in the local experiment file should be used, if not a warning is displayed when calling log_parameter_information. This is upgraded to an error exception by changing strict.","category":"page"},{"location":"#ClimaParams.jl","page":"Home","title":"ClimaParams.jl","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"This package contains all of the parameters used across the CliMA organization. Some parameters are simply global constants (e.g., speed of light), while others are parameters that may be tuned in a machine-learning layer that sits on-top of the climate model.","category":"page"},{"location":"#What-parameters-are-good-candidates-for-ClimaParams?","page":"Home","title":"What parameters are good candidates for ClimaParams?","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"ClimaParams serve several functionalities and require certain attributes. A parameter is a good candidate for ClimaParams if it has all of the following attributes:","category":"page"},{"location":"","page":"Home","title":"Home","text":"The parameter does not vary in space\nThe parameter does not vary in time (per climate simulation)\nThe parameter is a function of only constants other ClimaParams and or constants","category":"page"},{"location":"#Getting-Started","page":"Home","title":"Getting Started","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"The basic flow is as follows:","category":"page"},{"location":"","page":"Home","title":"Home","text":"Create the parameter dictionary with your desired floating point type\nRetrieve parameters","category":"page"},{"location":"","page":"Home","title":"Home","text":"import ClimaParams as CP\nparam_dict = CP.create_toml_dict(Float64)\nparams = CP.get_parameter_values(param_dict, [\"gravitational_acceleration\", \"planet_radius\"])","category":"page"},{"location":"","page":"Home","title":"Home","text":"See the The TOML parameter file interface and Basic Parameter Retrieval for detailed usage examples and integration into your code.","category":"page"},{"location":"API/#API","page":"API","title":"API","text":"","category":"section"},{"location":"API/","page":"API","title":"API","text":"CurrentModule = ClimaParams","category":"page"},{"location":"API/#Parameter-dictionaries","page":"API","title":"Parameter dictionaries","text":"","category":"section"},{"location":"API/","page":"API","title":"API","text":"AbstractTOMLDict\nParamDict","category":"page"},{"location":"API/#ClimaParams.AbstractTOMLDict","page":"API","title":"ClimaParams.AbstractTOMLDict","text":"AbstractTOMLDict{FT <: AbstractFloat}\n\nAbstract parameter dict. One subtype:\n\nParamDict\n\n\n\n\n\n","category":"type"},{"location":"API/#ClimaParams.ParamDict","page":"API","title":"ClimaParams.ParamDict","text":"ParamDict(data::Dict, override_dict::Union{Nothing,Dict})\n\nStructure to hold information read-in from TOML file, as well as a parametrization type FT.\n\nUses the name to search\n\nFields\n\ndata: dictionary representing a default/merged parameter TOML file\noverride_dict: either a nothing, or a dictionary representing an override parameter TOML file\n\n\n\n\n\n","category":"type"},{"location":"API/#File-parsing-and-parameter-logging","page":"API","title":"File parsing and parameter logging","text":"","category":"section"},{"location":"API/#User-facing-functions:","page":"API","title":"User facing functions:","text":"","category":"section"},{"location":"API/","page":"API","title":"API","text":"create_toml_dict\nget_parameter_values\nget_tagged_parameter_values\nget_tagged_parameter_names\nfuzzy_match\nfloat_type\nlog_parameter_information\nwrite_log_file\nmerge_toml_files\ncreate_parameter_struct","category":"page"},{"location":"API/#ClimaParams.create_toml_dict","page":"API","title":"ClimaParams.create_toml_dict","text":"create_toml_dict(FT;\n    override_file,\n    default_file,\n)\n\nCreates a ParamDict{FT} struct, by reading and merging upto two TOML files or Julia Dicts with override information taking precedence over default information.\n\n\n\n\n\n","category":"function"},{"location":"API/#ClimaParams.get_parameter_values","page":"API","title":"ClimaParams.get_parameter_values","text":"get_parameter_values(\n    pd::AbstractTOMLDict,\n    names::Union{String,Vector{String}},\n    component::String\n)\n\nget_parameter_values(\n    pd::AbstractTOMLDict,\n    name_map::Union{Dict, Vector{Pair}, NTuple{N, Pair}, Vararg{Pair}},\n    component::String\n)\n\nGiven a toml dict and a list of parameter names, returns a NamedTuple of the  parameters and their values. If a component is specified, the parameter is logged as being used in that component.\n\nInstead of a list of parameter names, this can take an iterable mapping from parameter names to variable names in code. Then, this function retrieves all parameters  from the long names and returns a NamedTuple where the keys are the variable names.\n\n\n\n\n\n","category":"function"},{"location":"API/#ClimaParams.get_tagged_parameter_values","page":"API","title":"ClimaParams.get_tagged_parameter_values","text":"get_tagged_parameter_values(pd::AbstractTOMLDict, tag::AbstractString)\nget_tagged_parameter_values(pd::AbstractTOMLDict, tags::Vector{AbstractString})\n\nReturns a list of name-value Pairs of the parameters with the given tag(s).\n\n\n\n\n\n","category":"function"},{"location":"API/#ClimaParams.get_tagged_parameter_names","page":"API","title":"ClimaParams.get_tagged_parameter_names","text":"get_tagged_parameter_names(pd::AbstractTOMLDict, tag::AbstractString)\nget_tagged_parameter_names(pd::AbstractTOMLDict, tags::Vector{AbstractString})\n\nReturns a list of the parameters with a given tag.\n\n\n\n\n\n","category":"function"},{"location":"API/#ClimaParams.fuzzy_match","page":"API","title":"ClimaParams.fuzzy_match","text":"fuzzy_match(s1::AbstractString, s2::AbstractString)\n\nTakes two strings and checks them for equality.  This strips punctuation [' ', '_', '*', '.', ',', '-', '(', ')'] and removes capitalization.\n\n\n\n\n\n","category":"function"},{"location":"API/#ClimaParams.float_type","page":"API","title":"ClimaParams.float_type","text":"float_type(::AbstractTOMLDict)\n\nThe float type from the parameter dict.\n\n\n\n\n\n","category":"function"},{"location":"API/#ClimaParams.log_parameter_information","page":"API","title":"ClimaParams.log_parameter_information","text":"log_parameter_information(\n    pd::AbstractTOMLDict,\n    filepath;\n    strict::Bool = false\n)\n\nWrites the parameter log file at filepath; checks that override parameters are all used.\n\nIf strict = true, errors if override parameters are unused.\n\n\n\n\n\n","category":"function"},{"location":"API/#ClimaParams.write_log_file","page":"API","title":"ClimaParams.write_log_file","text":"write_log_file(pd::AbstractTOMLDict, filepath)\n\nWrites a log file of all used parameters of pd at the filepath. This file can be used to rerun the experiment.\n\n\n\n\n\n","category":"function"},{"location":"API/#ClimaParams.merge_toml_files","page":"API","title":"ClimaParams.merge_toml_files","text":"merge_toml_files(filepaths; override)\n\nParses and merges all of the given TOML filepaths and returns them as a Dict. This allows a toml_dict to be constructed from multiple TOML files. By default, non-unique TOML entries are not allowed, but this can be changed by setting override = true.\n\n\n\n\n\n","category":"function"},{"location":"API/#ClimaParams.create_parameter_struct","page":"API","title":"ClimaParams.create_parameter_struct","text":"create_parameter_struct(\n    toml_dict,\n    param_struct_type,\n    name_map,\n    nested_structs = (;),\n)\n\nConstructs the parameter struct from the TOML dictionary. If the parameter struct has nested parameter structs, they must be passed. Floating type is inherited from the TOML dictionary.\n\nThis is fairly rigid and makes a few assumptions:\n\nThe parameter struct has a constructor that takes keyword arguments\nThe parameter struct's first type parameter is the floating point type\nAll nested parameter structs are given.\n\n\n\n\n\n","category":"function"}]
}
