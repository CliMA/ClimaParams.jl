var documenterSearchIndex = {"docs":
[{"location":"param_retrieval/#Basic-Parameter-Retrieval","page":"Parameter retrieval","title":"Basic Parameter Retrieval","text":"","category":"section"},{"location":"param_retrieval/","page":"Parameter retrieval","title":"Parameter retrieval","text":"ClimaParams.jl provides a centralized system for managing climate model parameters. The core workflow involves creating a parameter dictionary and then retrieving specific parameters from it.","category":"page"},{"location":"param_retrieval/#Core-Functions","page":"Parameter retrieval","title":"Core Functions","text":"","category":"section"},{"location":"param_retrieval/","page":"Parameter retrieval","title":"Parameter retrieval","text":"There are three key functions for parameter retrieval:","category":"page"},{"location":"param_retrieval/","page":"Parameter retrieval","title":"Parameter retrieval","text":"create_toml_dict constructs a parameter dictionary from TOML files\nget_parameter_values retrieves parameters from the dictionary","category":"page"},{"location":"param_retrieval/#Creating-Parameter-Dictionaries","page":"Parameter retrieval","title":"Creating Parameter Dictionaries","text":"","category":"section"},{"location":"param_retrieval/","page":"Parameter retrieval","title":"Parameter retrieval","text":"To construct a parameter dictionary, pass in the desired floating point type.  This will source parameter values from the global default list stored in src/parameters.toml","category":"page"},{"location":"param_retrieval/","page":"Parameter retrieval","title":"Parameter retrieval","text":"import ClimaParams as CP\ntoml_dict = CP.create_toml_dict(Float64)\nnothing # hide","category":"page"},{"location":"param_retrieval/","page":"Parameter retrieval","title":"Parameter retrieval","text":"You can also specify custom override and default files:","category":"page"},{"location":"param_retrieval/","page":"Parameter retrieval","title":"Parameter retrieval","text":"# With custom files\ntoml_dict = CP.create_toml_dict(\n    Float64,\n    override_file = \"my_parameters.toml\",\n    default_file = \"default_parameters.toml\"\n)","category":"page"},{"location":"param_retrieval/#Retrieving-Parameters","page":"Parameter retrieval","title":"Retrieving Parameters","text":"","category":"section"},{"location":"param_retrieval/","page":"Parameter retrieval","title":"Parameter retrieval","text":"To retrieve parameters, pass in the TOML dictionary and the parameter names that match those in the TOML file.","category":"page"},{"location":"param_retrieval/","page":"Parameter retrieval","title":"Parameter retrieval","text":"params = CP.get_parameter_values(toml_dict, [\"universal_gas_constant\", \"gravitational_acceleration\"])\nparams.universal_gas_constant\nparams.gravitational_acceleration\nnothing #hide","category":"page"},{"location":"param_retrieval/","page":"Parameter retrieval","title":"Parameter retrieval","text":"You can also use direct indexing to obtain values from the parameter dictionary:","category":"page"},{"location":"param_retrieval/","page":"Parameter retrieval","title":"Parameter retrieval","text":"toml_dict[\"gravitational_acceleration\"]","category":"page"},{"location":"param_retrieval/#Name-Maps","page":"Parameter retrieval","title":"Name Maps","text":"","category":"section"},{"location":"param_retrieval/","page":"Parameter retrieval","title":"Parameter retrieval","text":"Name maps allow you to map global parameter names to local variable names for convenience. This is especially useful when you want shorter, more intuitive variable names in your code.","category":"page"},{"location":"param_retrieval/#Using-NamedTuples","page":"Parameter retrieval","title":"Using NamedTuples","text":"","category":"section"},{"location":"param_retrieval/","page":"Parameter retrieval","title":"Parameter retrieval","text":"name_map = (;\n    :gravitational_acceleration => :g,\n    :angular_velocity_planet_rotation => :omega\n)\nparams = CP.get_parameter_values(toml_dict, name_map)\nparams.g  # gives value field of gravitational_acceleration\nparams.omega","category":"page"},{"location":"param_retrieval/#Using-Dictionaries","page":"Parameter retrieval","title":"Using Dictionaries","text":"","category":"section"},{"location":"param_retrieval/","page":"Parameter retrieval","title":"Parameter retrieval","text":"name_map = Dict(\"gravitational_acceleration\" => \"g\", \"angular_velocity_planet_rotation\" => \"omega\")\nparams = CP.get_parameter_values(toml_dict, name_map)\nnothing # hide","category":"page"},{"location":"param_retrieval/#Using-Varargs","page":"Parameter retrieval","title":"Using Varargs","text":"","category":"section"},{"location":"param_retrieval/","page":"Parameter retrieval","title":"Parameter retrieval","text":"params = CP.get_parameter_values(toml_dict, \n    :gravitational_acceleration => :g,\n    :angular_velocity_planet_rotation => :omega\n)\nnothing # hide","category":"page"},{"location":"param_retrieval/#Component-Logging","page":"Parameter retrieval","title":"Component Logging","text":"","category":"section"},{"location":"param_retrieval/","page":"Parameter retrieval","title":"Parameter retrieval","text":"You can specify a component name when retrieving parameters. This logs which parameters are used by which model component, which is useful for reproducibility:","category":"page"},{"location":"param_retrieval/","page":"Parameter retrieval","title":"Parameter retrieval","text":"params = CP.get_parameter_values(toml_dict, [\"gravitational_acceleration\"], \"Ocean\")\nnothing # hide","category":"page"},{"location":"param_retrieval/#Tagged-Parameters","page":"Parameter retrieval","title":"Tagged Parameters","text":"","category":"section"},{"location":"param_retrieval/","page":"Parameter retrieval","title":"Parameter retrieval","text":"ClimaParams supports parameter tagging for easy filtering. You can retrieve all parameters with a specific tag:","category":"page"},{"location":"param_retrieval/","page":"Parameter retrieval","title":"Parameter retrieval","text":"# Get all atmospheric parameters\natmospheric_params = CP.get_tagged_parameter_values(toml_dict, \"atmosphere\")\n\n# Get parameters with multiple tags\nphysics_params = CP.get_tagged_parameter_values(toml_dict, [\"atmosphere\", \"turbulence\"])\nnothing # hide","category":"page"},{"location":"param_retrieval/#Example-Usage","page":"Parameter retrieval","title":"Example Usage","text":"","category":"section"},{"location":"param_retrieval/#Simple-Parameter-Retrieval","page":"Parameter retrieval","title":"Simple Parameter Retrieval","text":"","category":"section"},{"location":"param_retrieval/","page":"Parameter retrieval","title":"Parameter retrieval","text":"Here's a basic example showing how to retrieve parameters for use in a simulation:","category":"page"},{"location":"param_retrieval/","page":"Parameter retrieval","title":"Parameter retrieval","text":"import ClimaParams as CP\n\n# Create parameter dictionary\ntoml_dict = CP.create_toml_dict(Float64)\n\n# Retrieve specific parameters\nparams = CP.get_parameter_values(toml_dict, [\n    \"gravitational_acceleration\",\n    \"universal_gas_constant\", \n    \"planet_radius\"\n])\n\n# Use parameters in your code\ng = params.gravitational_acceleration\nR = params.universal_gas_constant\n\n# Alternatively, you can index directly into the parameter dict\ntoml_dict[\"gravitational_acceleration\"]\n","category":"page"},{"location":"param_retrieval/#Parameter-Structs","page":"Parameter retrieval","title":"Parameter Structs","text":"","category":"section"},{"location":"param_retrieval/","page":"Parameter retrieval","title":"Parameter retrieval","text":"For more complex applications, you can build parameter structs that encapsulate related parameters. Here's a complete example from the CliMA ecosystem:","category":"page"},{"location":"param_retrieval/#Building-Parameter-Structs","page":"Parameter retrieval","title":"Building Parameter Structs","text":"","category":"section"},{"location":"param_retrieval/","page":"Parameter retrieval","title":"Parameter retrieval","text":"Base.@kwdef struct ThermodynamicsParameters{FT}\n    universal_gas_constant::FT\n    molmass_dryair::FT\n    # derived parameters\n    R_d::FT = universal_gas_constant / molmass_dryair\nend\n\n# Float-type constructor\nThermodynamicsParameters(::Type{FT}) = ThermodynamicsParameters(CP.create_toml_dict(FT))\n\n# TOML dictionary constructor\nfunction ThermodynamicsParameters(toml_dict)\n    name_map = [\n        :temperature_triple_point => :T_triple,\n        :adiabatic_exponent_dry_air => :kappa_d,\n        :pressure_triple_point => :press_triple,\n        :thermodynamics_temperature_reference => :T_0,\n        :temperature_water_freeze => :T_freeze,\n        :isobaric_specific_heat_ice => :cp_i,\n    ]\n\n    parameters = CP.get_parameter_values(\n        toml_dict,\n        name_map,\n        \"Thermodynamics\",  # Component name for logging\n    )\n\n    FT = CP.float_type(toml_dict)\n    return ThermodynamicsParameters{FT}(parameters...)\nend\nnothing # hide","category":"page"},{"location":"param_retrieval/#Hierarchical-Parameter-Sets","page":"Parameter retrieval","title":"Hierarchical Parameter Sets","text":"","category":"section"},{"location":"param_retrieval/","page":"Parameter retrieval","title":"Parameter retrieval","text":"For complex models with multiple components, you can build hierarchical parameter sets that maintain parameter relationships:","category":"page"},{"location":"param_retrieval/","page":"Parameter retrieval","title":"Parameter retrieval","text":"# Build individual component parameter sets\nparam_therm = ThermodynamicsParameters(toml_dict)\nparam_0M = CloudMicrophysics.Microphysics_0M_Parameters(toml_dict)\n\n# Combine into a hierarchical parameter set\nparameter_set = CloudMicrophysics.CloudMicrophysicsParameters(\n    toml_dict,\n    param_0M,\n    param_therm\n)","category":"page"},{"location":"param_retrieval/#Advanced-Examples-from-CliMA","page":"Parameter retrieval","title":"Advanced Examples from CliMA","text":"","category":"section"},{"location":"param_retrieval/#Thermodynamics.jl-Example","page":"Parameter retrieval","title":"Thermodynamics.jl Example","text":"","category":"section"},{"location":"param_retrieval/","page":"Parameter retrieval","title":"Parameter retrieval","text":"Here's how Thermodynamics.jl uses ClimaParams in practice:","category":"page"},{"location":"param_retrieval/#User-facing-driver-file","page":"Parameter retrieval","title":"User-facing driver file","text":"","category":"section"},{"location":"param_retrieval/","page":"Parameter retrieval","title":"Parameter retrieval","text":"import ClimaParams as CP\nusing Thermodynamics\n\nthermo_params = ThermodynamicsParameters(Float64)","category":"page"},{"location":"param_retrieval/#Source-code-implementation","page":"Parameter retrieval","title":"Source code implementation","text":"","category":"section"},{"location":"param_retrieval/","page":"Parameter retrieval","title":"Parameter retrieval","text":"Base.@kwdef struct ThermodynamicsParameters{FT}\n    LH_v0::FT\n    LH_s0::FT\n    # ... other parameters\n    # derived parameters\n    LH_f0 = LH_s0 - LH_v0\nend\n\n# Float-type constructor\nThermodynamicsParameters(::Type{FT}) = ThermodynamicsParameters(CP.create_toml_dict(FT))\n\n# TOML dictionary constructor\nfunction ThermodynamicsParameters(toml_dict)\n    name_map = [\n        :temperature_triple_point => :T_triple,\n        :adiabatic_exponent_dry_air => :kappa_d,\n        :pressure_triple_point => :press_triple,\n        :thermodynamics_temperature_reference => :T_0,\n        :temperature_water_freeze => :T_freeze,\n        :isobaric_specific_heat_ice => :cp_i,\n        # ... more mappings\n    ]\n\n    parameters = CP.get_parameter_values(\n        toml_dict,\n        name_map,\n        \"Thermodynamics\",\n    )\n    \n    # Create the parameter struct, preserving parameter relationships\n    FT = CP.float_type(toml_dict)\n    return ThermodynamicsParameters{FT}(parameters...)\nend","category":"page"},{"location":"param_retrieval/#CloudMicrophysics.jl-Example","page":"Parameter retrieval","title":"CloudMicrophysics.jl Example","text":"","category":"section"},{"location":"param_retrieval/","page":"Parameter retrieval","title":"Parameter retrieval","text":"Here's how CloudMicrophysics.jl builds hierarchical parameter sets:","category":"page"},{"location":"param_retrieval/#User-facing-driver-file-2","page":"Parameter retrieval","title":"User-facing driver file","text":"","category":"section"},{"location":"param_retrieval/","page":"Parameter retrieval","title":"Parameter retrieval","text":"import ClimaParams as CP\nimport Thermodynamics\nimport CloudMicrophysics\n\n# Load defaults\ntoml_dict = CP.create_toml_dict(Float64)\n\n# Build the low level parameter sets\nparam_therm = Thermodynamics.Parameters.ThermodynamicsParameters(toml_dict)\nparam_0M = CloudMicrophysics.Microphysics_0M_Parameters(toml_dict)\n\n# Build the hierarchical parameter set\nparameter_set = CloudMicrophysics.CloudMicrophysicsParameters(\n    toml_dict,\n    param_0M,\n    param_therm\n)","category":"page"},{"location":"param_retrieval/#Source-code-implementation-2","page":"Parameter retrieval","title":"Source code implementation","text":"","category":"section"},{"location":"param_retrieval/","page":"Parameter retrieval","title":"Parameter retrieval","text":"abstract type AbstractMicrophysicsParameters end\nstruct NoMicrophysicsParameters <: AbstractMicrophysicsParameters end\n\nBase.@kwdef struct Microphysics_0M_Parameters{FT} <: AbstractMicrophysicsParameters\n    τ_precip::FT\n    qc_0::FT\n    S_0::FT\nend\n\nBase.@kwdef struct CloudMicrophysicsParameters{FT, AMPS <: AbstractMicrophysicsParameters}\n    K_therm::FT\n    # ... other parameters\n    MPS::AMPS\n    TPS::ThermodynamicsParameters{FT}\nend\n\nfunction CloudMicrophysicsParameters(\n    toml_dict,\n    MPS::AMPS,\n    TPS::ThermodynamicsParameters{FT},\n) where {FT, AMPS <: AbstractMicrophysicsParameters}\n\n    parameter_names = [\"K_therm\", \"other_param\", ...]\n\n    parameters = CP.get_parameter_values(\n        toml_dict,\n        parameter_names,\n        \"CloudMicrophysics\",\n    )\n\n    return CloudMicrophysicsParameters{FT, AMPS}(;\n        parameters...,\n        MPS,  # Nested parameter struct\n        TPS,  # Nested parameter struct\n    )\nend","category":"page"},{"location":"param_retrieval/#Parameters-as-functions","page":"Parameter retrieval","title":"Parameters-as-functions","text":"","category":"section"},{"location":"param_retrieval/","page":"Parameter retrieval","title":"Parameter retrieval","text":"When building model components, parameters are extracted by calling param_set.name:","category":"page"},{"location":"param_retrieval/","page":"Parameter retrieval","title":"Parameter retrieval","text":"function example_cloudmicrophysics_func(param_set::CloudMicrophysicsParameters, ...)\n    K_therm = param_set.K_therm\n    # ... use parameters\nend","category":"page"},{"location":"param_retrieval/","page":"Parameter retrieval","title":"Parameter retrieval","text":"These parameters can be made into functions for added flexibility:","category":"page"},{"location":"param_retrieval/","page":"Parameter retrieval","title":"Parameter retrieval","text":"K_therm(param_set) = param_set.K_therm","category":"page"},{"location":"param_retrieval/","page":"Parameter retrieval","title":"Parameter retrieval","text":"This can be useful for derived parameters:","category":"page"},{"location":"param_retrieval/","page":"Parameter retrieval","title":"Parameter retrieval","text":"derived_param(param_set) = param_set.param1 * param_set.param2","category":"page"},{"location":"param_retrieval/","page":"Parameter retrieval","title":"Parameter retrieval","text":"Or to forward parameters from nested parameter structs:","category":"page"},{"location":"param_retrieval/","page":"Parameter retrieval","title":"Parameter retrieval","text":"forwarded_param(ps::ParamSet) = ps.nested_params.forwarded_param","category":"page"},{"location":"param_retrieval/","page":"Parameter retrieval","title":"Parameter retrieval","text":"Functions can be autogenerated using @eval:","category":"page"},{"location":"param_retrieval/","page":"Parameter retrieval","title":"Parameter retrieval","text":"for fn in fieldnames(ParamSet)\n    @eval $(fn)(ps::ParamSet) = ps.$(fn)\nend","category":"page"},{"location":"param_retrieval/#Parameter-Types","page":"Parameter retrieval","title":"Parameter Types","text":"","category":"section"},{"location":"param_retrieval/","page":"Parameter retrieval","title":"Parameter retrieval","text":"ClimaParams supports several parameter types:","category":"page"},{"location":"param_retrieval/","page":"Parameter retrieval","title":"Parameter retrieval","text":"Float: Numeric values (default)\nInteger: Whole numbers\nString: Text values  \nBool: Boolean values","category":"page"},{"location":"param_retrieval/","page":"Parameter retrieval","title":"Parameter retrieval","text":"The type is specified in the TOML file:","category":"page"},{"location":"param_retrieval/","page":"Parameter retrieval","title":"Parameter retrieval","text":"[gravitational_acceleration]\nvalue = 9.81\ntype = \"float\"\ndescription = \"Gravitational acceleration on the planet (m s⁻²).\"","category":"page"},{"location":"toml/#The-TOML-Parameter-File-Interface","page":"TOML file interface","title":"The TOML Parameter File Interface","text":"","category":"section"},{"location":"toml/","page":"TOML file interface","title":"TOML file interface","text":"Parameters for CliMA models are defined in .toml files. ClimaParams.jl is designed to work with two main sources of parameters, which are merged together:","category":"page"},{"location":"toml/","page":"TOML file interface","title":"TOML file interface","text":"A default parameter file: This file is bundled with ClimaParams.jl and contains a comprehensive list of default values for the entire CliMA ecosystem.\nA user-defined override file: This file is provided by the user for a specific experiment. It only needs to contain the parameters that deviate from the defaults.","category":"page"},{"location":"toml/#Parameter-Format","page":"TOML file interface","title":"Parameter Format","text":"","category":"section"},{"location":"toml/","page":"TOML file interface","title":"TOML file interface","text":"Each parameter is defined by its unique name as a TOML table header (e.g., [my_parameter_name]). It can have the following attributes:","category":"page"},{"location":"toml/","page":"TOML file interface","title":"TOML file interface","text":"value: (Required) The value of the parameter. Can be a scalar or an array.\ntype: (Required) The data type. Supported types are \"float\", \"integer\", \"string\", and \"bool\".\ndescription: (Recommended) A string explaining the parameter's purpose and its physical units.\ntag: An optional array of strings used to group related parameters.","category":"page"},{"location":"toml/","page":"TOML file interface","title":"TOML file interface","text":"Additional attributes, for example, used by EnsembleKalmanProcesses.jl, may include:","category":"page"},{"location":"toml/","page":"TOML file interface","title":"TOML file interface","text":"prior: An optional string describing a prior distribution, for use in calibration and data assimilation workflows.\ntransformation: An optional string describing a transformation for the parameter, used in calibration.","category":"page"},{"location":"toml/","page":"TOML file interface","title":"TOML file interface","text":"warn: On Array Types\nArray values use the same type declaration as their scalar counterparts. For example, a vector of floats is specified with type = \"float\".","category":"page"},{"location":"toml/#Basic-Parameter-Definition","page":"TOML file interface","title":"Basic Parameter Definition","text":"","category":"section"},{"location":"toml/","page":"TOML file interface","title":"TOML file interface","text":"At a minimum, a parameter requires a value and a type.","category":"page"},{"location":"toml/","page":"TOML file interface","title":"TOML file interface","text":"[molar_mass_dry_air]\nvalue = 0.03\ntype = \"float\"","category":"page"},{"location":"toml/","page":"TOML file interface","title":"TOML file interface","text":"It is highly recommended to include a description with units (CliMA generally uses SI units), as found in the default parameter files.","category":"page"},{"location":"toml/","page":"TOML file interface","title":"TOML file interface","text":"[molar_mass_dry_air]\nvalue = 0.02897\ntype = \"float\"\ndescription = \"Molecular weight of dry air (kg/mol)\"","category":"page"},{"location":"toml/#Tagging-Parameters","page":"TOML file interface","title":"Tagging Parameters","text":"","category":"section"},{"location":"toml/","page":"TOML file interface","title":"TOML file interface","text":"Tags provide a way to group related parameters. They do not create namespaces, and all parameter names must remain globally unique. To add tags, provide a list of strings to the tag field.","category":"page"},{"location":"toml/","page":"TOML file interface","title":"TOML file interface","text":"A recommended convention is to tag parameters with the model component(s) where they are used.","category":"page"},{"location":"toml/","page":"TOML file interface","title":"TOML file interface","text":"[prandtl_number_0_grachev]\nvalue = 0.98\ntype = \"float\"\ndescription = \"The turbulent Prandtl number in neutral conditions ($Pr_0$) for the Grachev universal functions (unitless). Source: Grachev et al. (2007), DOI: 10.1007/s10546-007-9177-6.\"\ntag = [\"SurfaceFluxes\"]","category":"page"},{"location":"toml/","page":"TOML file interface","title":"TOML file interface","text":"Parameters with a specific tag can then be retrieved easily in Julia. Tag matching is case-insensitive and ignores punctuation. For more information, see the API for fuzzy_match.","category":"page"},{"location":"toml/","page":"TOML file interface","title":"TOML file interface","text":"# This will retrieve all parameters tagged with \"SurfaceFluxes\"\nsf_params = get_tagged_parameter_values(toml_dict, \"surfacefluxes\")","category":"page"},{"location":"toml/#Advanced:-ClimaParams.jl-for-Calibration","page":"TOML file interface","title":"Advanced: ClimaParams.jl for Calibration","text":"","category":"section"},{"location":"toml/","page":"TOML file interface","title":"TOML file interface","text":"For calibration workflows, parameters can include additional metadata to guide the calibration process:","category":"page"},{"location":"toml/","page":"TOML file interface","title":"TOML file interface","text":"[entrainment_parameter]\nvalue = 0.2\ntype = \"float\"\ndescription = \"Entrainment rate parameter for convective plumes\"\ntag = [\"Convection\", \"Turbulence\"]\nprior = \"LogNormal(-1.6, 0.4)\"\ntransformation = \"log\"","category":"page"},{"location":"toml/","page":"TOML file interface","title":"TOML file interface","text":"The prior and transformation fields help guide the calibration process in EnsembleKalmanProcesses.jl.","category":"page"},{"location":"toml/#Override-Files","page":"TOML file interface","title":"Override Files","text":"","category":"section"},{"location":"toml/","page":"TOML file interface","title":"TOML file interface","text":"When an override file is provided, its values for any given parameter take precedence over the default values. Other attributes from the default file (like description or tag) are merged if they are not present in the override file.","category":"page"},{"location":"toml/#Override-Mechanism","page":"TOML file interface","title":"Override Mechanism","text":"","category":"section"},{"location":"toml/","page":"TOML file interface","title":"TOML file interface","text":"For example, if the user's override file contains:","category":"page"},{"location":"toml/","page":"TOML file interface","title":"TOML file interface","text":"[molar_mass_dry_air]\nvalue = 0.03\ntype = \"float\"","category":"page"},{"location":"toml/","page":"TOML file interface","title":"TOML file interface","text":"The final, merged parameter used in the simulation will be:","category":"page"},{"location":"toml/","page":"TOML file interface","title":"TOML file interface","text":"[molar_mass_dry_air]\nvalue = 0.03  # <-- Overwritten by the user's value\ntype = \"float\"\ndescription = \"Molar mass of dry air (kg mol⁻¹).\" # <-- Merged from the default file","category":"page"},{"location":"toml/#Interacting-with-Parameters-in-Julia","page":"TOML file interface","title":"Interacting with Parameters in Julia","text":"","category":"section"},{"location":"toml/","page":"TOML file interface","title":"TOML file interface","text":"ClimaParams.jl provides a clear workflow for using parameters in your code.","category":"page"},{"location":"toml/#.-Loading-Parameters","page":"TOML file interface","title":"1. Loading Parameters","text":"","category":"section"},{"location":"toml/","page":"TOML file interface","title":"TOML file interface","text":"The main entry point is create_toml_dict, which loads, merges, and types the parameters.","category":"page"},{"location":"toml/","page":"TOML file interface","title":"TOML file interface","text":"create_toml_dict(FT; override_file=nothing, default_file=...)","category":"page"},{"location":"toml/","page":"TOML file interface","title":"TOML file interface","text":"The first argument, FT, must be a float type (e.g., Float64 or Float32) and determines the precision of all floating-point parameters.","category":"page"},{"location":"toml/","page":"TOML file interface","title":"TOML file interface","text":"A typical use case involves providing the path to a local override file:","category":"page"},{"location":"toml/","page":"TOML file interface","title":"TOML file interface","text":"import ClimaParams\n\nFT = Float64\nlocal_experiment_file = joinpath(@__DIR__, \"local_exp_parameters.toml\")\ntoml_dict = ClimaParams.create_toml_dict(FT; override_file = local_experiment_file)","category":"page"},{"location":"toml/","page":"TOML file interface","title":"TOML file interface","text":"If override_file is omitted, only the default parameters are loaded. You can also pass Julia Dicts directly instead of file paths. To combine more than two files, see the API for merge_toml_files.","category":"page"},{"location":"toml/#.-Using-and-Logging-Parameters","page":"TOML file interface","title":"2. Using and Logging Parameters","text":"","category":"section"},{"location":"toml/","page":"TOML file interface","title":"TOML file interface","text":"The returned toml_dict is then used to construct parameter structs for different model components.","category":"page"},{"location":"toml/","page":"TOML file interface","title":"TOML file interface","text":"# Retrieve values and construct the component-specific parameter struct\nthermo_params = Thermodynamics.ThermodynamicsParameters(toml_dict)\n\n# ... build the rest of the model components ...\n\n# After all components are built, log the used parameters before running\nlog_file = joinpath(@__DIR__, \"parameter_log.toml\")\nClimaParams.log_parameter_information(toml_dict, log_file)\n\n# ... run_model(...) ...","category":"page"},{"location":"toml/","page":"TOML file interface","title":"TOML file interface","text":"The function log_parameter_information performs two key tasks:","category":"page"},{"location":"toml/","page":"TOML file interface","title":"TOML file interface","text":"Writes a log file: It saves a complete record of every parameter actually used in the simulation to log_file.\nPerforms sanity checks: It verifies that all parameters in your override file were used.","category":"page"},{"location":"toml/","page":"TOML file interface","title":"TOML file interface","text":"The log file includes a used_in field, which lists every component that requested the parameter. Continuing the example, the log file would contain:","category":"page"},{"location":"toml/","page":"TOML file interface","title":"TOML file interface","text":"[molar_mass_dry_air]\nvalue = 0.03\ntype = \"float\"\ndescription = \"Molar mass of dry air (kg mol⁻¹).\"\nused_in = [\"Thermodynamics\"]","category":"page"},{"location":"toml/","page":"TOML file interface","title":"TOML file interface","text":"note: Reproducibility\nThe generated log file is a valid TOML parameter file and can be used as an override_file to exactly reproduce an experiment.","category":"page"},{"location":"toml/","page":"TOML file interface","title":"TOML file interface","text":"warn: Unused Parameter Checks\nBy default, log_parameter_information will issue a warning if any parameter in your override file was not requested by any component. To treat this as a fatal error, set its argument strict=true.","category":"page"},{"location":"#ClimaParams.jl","page":"Home","title":"ClimaParams.jl","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"A centralized parameter management system for climate modeling, ClimaParams.jl supports physical constants, planetary properties, and tunable parameters designed for calibration with data assimilation and machine learning tools.","category":"page"},{"location":"#Overview","page":"Home","title":"Overview","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"ClimaParams.jl provides a single source of truth for the parameters used in the Climate Modeling Alliance (CliMA) ecosystem. By centralizing parameters across all model components (atmosphere, ocean, land, etc.), it enables joint calibration of interconnected climate processes through data assimilation and machine learning pipelines. This unified approach ensures that parameters shared between components remain consistent and can be optimized together, leading to more physically coherent model calibration.","category":"page"},{"location":"","page":"Home","title":"Home","text":"The package manages two fundamental types of values:","category":"page"},{"location":"","page":"Home","title":"Home","text":"Physical and planetary constants (e.g., speed of light or planet radius)\nTunable model parameters that can be calibrated individually or jointly across components","category":"page"},{"location":"#What-parameters-are-good-candidates-for-ClimaParams?","page":"Home","title":"What parameters are good candidates for ClimaParams?","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"A parameter is a good candidate for ClimaParams if it has all of the following attributes:","category":"page"},{"location":"","page":"Home","title":"Home","text":"The parameter does not vary in space\nThe parameter does not vary in time (per climate simulation)\nThe parameter is a function of only constants and other ClimaParams","category":"page"},{"location":"#Getting-Started","page":"Home","title":"Getting Started","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"The basic flow is as follows:","category":"page"},{"location":"","page":"Home","title":"Home","text":"Create the parameter dictionary with your desired floating point type\nRetrieve parameters","category":"page"},{"location":"","page":"Home","title":"Home","text":"import ClimaParams as CP\n\n# Create parameter dictionary with default values\nparam_dict = CP.create_toml_dict(Float64)\n\n# Retrieve physical constants\nconstants = CP.get_parameter_values(\n    param_dict, \n    [\"gravitational_acceleration\", \"planet_radius\", \"light_speed\"]\n)\n\n# Retrieve parameters with custom names\nparams = CP.get_parameter_values(\n    param_dict,\n    Dict(\"universal_gas_constant\" => \"R\", \"gravitational_acceleration\" => \"g\")\n)","category":"page"},{"location":"","page":"Home","title":"Home","text":"Or retrieve all parameters associated with a specific tag, for example, \"SurfaceFluxes\"","category":"page"},{"location":"","page":"Home","title":"Home","text":"sf_params = CP.get_tagged_parameter_values(param_dict, \"surfacefluxes\") ","category":"page"},{"location":"#Best-Practices","page":"Home","title":"Best Practices","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Use descriptive parameter names in your TOML files\nLog component usage by specifying component names\nUse name maps for shorter, more intuitive variable names\nTag related parameters for easy filtering\nCreate parameter structs to encapsulate related parameters and their relationships\nValidate parameter values before using them in simulations","category":"page"},{"location":"#Documentation-Overview","page":"Home","title":"Documentation Overview","text":"","category":"section"},{"location":"#Core-Usage","page":"Home","title":"Core Usage","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Parameter retrieval: Learn how to retrieve parameters from dictionaries, use name maps, and work with tagged parameters. Includes practical examples from the CliMA ecosystem.","category":"page"},{"location":"#Configuration-and-File-Format","page":"Home","title":"Configuration and File Format","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"TOML file interface: Understand how to define parameters in TOML files, including value types, descriptions, tags, and advanced features for calibration workflows.","category":"page"},{"location":"#API-Reference","page":"Home","title":"API Reference","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"API: Complete reference documentation for all functions and types in ClimaParams.jl, organized by functionality and typical usage patterns.","category":"page"},{"location":"#Advanced-Topics","page":"Home","title":"Advanced Topics","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Parameter Structs: Learn how to create custom parameter structs for your models.\nComponent Logging: Understand how to track parameter usage across model components for logging and validation.\nOverride Files: See how to customize parameters for specific experiments.\nTagged Parameters: Discover how to organize and retrieve related parameters.","category":"page"},{"location":"","page":"Home","title":"Home","text":"For detailed usage examples and integration into your code, start with the Parameter retrieval guide, then explore the TOML file interface for configuration details.","category":"page"},{"location":"API/","page":"API","title":"API","text":"CurrentModule = ClimaParams","category":"page"},{"location":"API/#API","page":"API","title":"API","text":"","category":"section"},{"location":"API/","page":"API","title":"API","text":"This page documents the functions and types available in ClimaParams.jl. The API is organized to follow a typical user workflow.","category":"page"},{"location":"API/#.-Core-Data-Structures","page":"API","title":"1. Core Data Structures","text":"","category":"section"},{"location":"API/","page":"API","title":"API","text":"These are the main types for holding and interacting with parameters.","category":"page"},{"location":"API/","page":"API","title":"API","text":"AbstractTOMLDict\nParamDict\nBase.getindex\nfloat_type","category":"page"},{"location":"API/#ClimaParams.AbstractTOMLDict","page":"API","title":"ClimaParams.AbstractTOMLDict","text":"AbstractTOMLDict{FT <: AbstractFloat}\n\nAbstract supertype for parameter dictionaries.\n\nThese objects hold model parameters read from TOML files and are parameterized by a float type FT to ensure type stability. See concrete implementation ParamDict.\n\n\n\n\n\n","category":"type"},{"location":"API/#ClimaParams.ParamDict","page":"API","title":"ClimaParams.ParamDict","text":"ParamDict{FT} <: AbstractTOMLDict{FT}\n\nA concrete parameter dictionary that stores parameter data from TOML files.\n\nThis struct holds the effective set of parameters (defaults merged with any overrides) and tracks which override parameters have been used.\n\nFields\n\ndata::Dict: The main dictionary holding the complete, merged set of parameter values and their metadata.\noverride_dict::Union{Nothing, Dict}: A dictionary containing only the parameters from an override file, used for tracking purposes. Is nothing if no override file was provided.\n\n\n\n\n\n","category":"type"},{"location":"API/#Base.getindex","page":"API","title":"Base.getindex","text":"Base.getindex(pd::ParamDict, key)\n\nRetrieves a parameter by its key, converting it to the type specified in the TOML file.\n\nThis allows for direct, dictionary-like access to the typed value of a parameter.\n\nArguments\n\npd::ParamDict: The parameter dictionary.\nkey: The name of the parameter to retrieve.\n\nReturns\n\nThe parameter's value, cast to the type defined in its metadata (e.g., Float64, Int, Bool).\n\nExamples\n\ntoml_dict = CP.create_toml_dict(Float64)\nparam_value = toml_dict[\"planet_radius\"]  # Returns the value, e.g., 6.371e6\n\n\n\n\n\n","category":"function"},{"location":"API/#ClimaParams.float_type","page":"API","title":"ClimaParams.float_type","text":"float_type(pd::AbstractTOMLDict{FT})\n\nReturns the float type FT with which the parameter dictionary pd was initialized.\n\n\n\n\n\n","category":"function"},{"location":"API/#.-Creating-a-Parameter-Dictionary","page":"API","title":"2. Creating a Parameter Dictionary","text":"","category":"section"},{"location":"API/","page":"API","title":"API","text":"The primary entry point is create_toml_dict, which can be customized by merging multiple files.","category":"page"},{"location":"API/","page":"API","title":"API","text":"create_toml_dict\nmerge_toml_files","category":"page"},{"location":"API/#ClimaParams.create_toml_dict","page":"API","title":"ClimaParams.create_toml_dict","text":"create_toml_dict(\n    FT;\n    override_file::Union{String, Dict, Nothing}=nothing,\n    default_file::Union{String, Dict}=\"parameters.toml\",\n)\n\nCreates a ParamDict{FT} by reading and merging default and override parameter sources.\n\nThis is the main entry point for constructing a parameter dictionary. It reads a default_file and optionally an override_file, with parameters from the override file taking precedence. The sources can be file paths or already-parsed Julia Dicts.\n\nArguments\n\nFT::{Type{<:AbstractFloat}}: The floating-point type to be used for all \"float\" parameters.\n\nKeywords\n\noverride_file: Path to a TOML file or a Dict containing override parameters.\ndefault_file: Path to the default TOML file or a Dict containing default parameters. Defaults to the parameters.toml file in the package directory.\n\nReturns\n\nA ParamDict{FT} containing the merged and typed parameters.\n\n\n\n\n\n","category":"function"},{"location":"API/#ClimaParams.merge_toml_files","page":"API","title":"ClimaParams.merge_toml_files","text":"merge_toml_files(filepaths; override::Bool=false)\n\nParses and merges multiple TOML files into a single dictionary.\n\nArguments\n\nfilepaths: An iterable of strings, where each string is a path to a TOML file.\noverride::Bool: If false (the default), an error is thrown for duplicate parameter entries across files. If true, a warning is issued and later files in the filepaths list will overwrite earlier entries.\n\nReturns\n\nDict{String, Any}: A dictionary containing the merged data from all TOML files.\n\n\n\n\n\n","category":"function"},{"location":"API/#.-Accessing-Parameter-Values","page":"API","title":"3. Accessing Parameter Values","text":"","category":"section"},{"location":"API/","page":"API","title":"API","text":"Once a ParamDict is created, you can retrieve parameter values in several ways. The most common method is get_parameter_values.","category":"page"},{"location":"API/","page":"API","title":"API","text":"get_parameter_values","category":"page"},{"location":"API/#ClimaParams.get_parameter_values","page":"API","title":"ClimaParams.get_parameter_values","text":"get_parameter_values(pd, names, [component])\nget_parameter_values(pd, name_map, [component])\n\nRetrieves parameter values from the dictionary pd, returning them in a NamedTuple. This function has two main methods:\n\nRetrieve parameters by a list of names.\nRetrieve and rename parameters using a name_map.\n\nIf a component string is provided, it also logs the parameters as being used by that component.\n\nArguments\n\npd::{AbstractTOMLDict}: The parameter dictionary.\nnames::Union{String,Vector{String}}: A single name or vector of names to retrieve.\nname_map: A Dict or other iterable of Pairs mapping the parameter name in the TOML file to the desired variable name in the code (e.g., \"long_name_in_toml\" => \"short_name_in_code\").\ncomponent::Union{AbstractString, Nothing}: An optional string to log which model component uses these parameters.\n\nReturns\n\nA NamedTuple where keys are the parameter names (or the renamed variable names) and values are the corresponding typed parameter values.\n\nExamples\n\n# Method 1: Retrieve by name\nparams = get_parameter_values(toml_dict, [\"gravitational_acceleration\", \"planet_radius\"])\n# params.gravitational_acceleration = 9.81\n\n# Method 2: Retrieve and rename\nname_map = Dict(\"gravitational_acceleration\" => \"g\", \"planet_radius\" => \"R_p\")\nparams_renamed = get_parameter_values(toml_dict, name_map)\n# params_renamed.g = 9.81\n\n\n\n\n\n","category":"function"},{"location":"API/#Tag-Based-Retrieval","page":"API","title":"Tag-Based Retrieval","text":"","category":"section"},{"location":"API/","page":"API","title":"API","text":"Parameters can be organized in the TOML file with tag entries. These functions allow you to retrieve all parameters associated with one or more tags.","category":"page"},{"location":"API/","page":"API","title":"API","text":"get_tagged_parameter_values\nget_tagged_parameter_names\nfuzzy_match","category":"page"},{"location":"API/#ClimaParams.get_tagged_parameter_values","page":"API","title":"ClimaParams.get_tagged_parameter_values","text":"get_tagged_parameter_values(pd::AbstractTOMLDict, tag)\n\nRetrieves the values of all parameters associated with a given tag or list of tags.\n\nArguments\n\npd::{AbstractTOMLDict}: The parameter dictionary.\ntag::Union{AbstractString, Vector{<:AbstractString}}: The tag or vector of tags to search for.\n\nReturns\n\nA NamedTuple of the tagged parameters, where keys are parameter names and values are their typed values.\n\n\n\n\n\n","category":"function"},{"location":"API/#ClimaParams.get_tagged_parameter_names","page":"API","title":"ClimaParams.get_tagged_parameter_names","text":"get_tagged_parameter_names(pd::AbstractTOMLDict, tag)\n\nRetrieves the names of all parameters associated with a given tag or list of tags.\n\nTag matching is case-insensitive and ignores punctuation and whitespace.\n\nArguments\n\npd::{AbstractTOMLDict}: The parameter dictionary.\ntag::Union{AbstractString, Vector{<:AbstractString}}: The tag or vector of tags to search for.\n\nReturns\n\nVector{String}: A list of parameter names that have the specified tag(s).\n\n\n\n\n\n","category":"function"},{"location":"API/#ClimaParams.fuzzy_match","page":"API","title":"ClimaParams.fuzzy_match","text":"fuzzy_match(s1::AbstractString, s2::AbstractString)\n\nCompares two strings for equality, ignoring case and select punctuation.\n\nThe characters [' ', '_', '*', '.', ',', '-', '(', ')'] are stripped from both strings before comparison.\n\n\n\n\n\n","category":"function"},{"location":"API/#.-Utilities-for-Integration-and-Reproducibility","page":"API","title":"4. Utilities for Integration and Reproducibility","text":"","category":"section"},{"location":"API/","page":"API","title":"API","text":"These functions support logging, validation, and integration with user-defined parameter structs.","category":"page"},{"location":"API/","page":"API","title":"API","text":"log_parameter_information\nwrite_log_file\ncheck_override_parameter_usage\nlog_component!\ncreate_parameter_struct","category":"page"},{"location":"API/#ClimaParams.log_parameter_information","page":"API","title":"ClimaParams.log_parameter_information","text":"log_parameter_information(pd::AbstractTOMLDict, filepath; strict::Bool = false)\n\nA convenience function that performs end-of-run parameter handling.\n\nIt calls write_log_file to save used parameters and then check_override_parameter_usage to validate that all override parameters were used.\n\nArguments\n\npd::{AbstractTOMLDict}: The parameter dictionary.\nfilepath::{AbstractString}: The path for the output log file.\nstrict::Bool: If true, errors if override parameters are unused.\n\n\n\n\n\n","category":"function"},{"location":"API/#ClimaParams.write_log_file","page":"API","title":"ClimaParams.write_log_file","text":"write_log_file(pd::AbstractTOMLDict, filepath::AbstractString)\n\nSaves all used parameters to a TOML file at the specified filepath.\n\nThis function filters the dictionary to include only parameters that have been logged with log_component!, creating a file that can be used to reproduce an experiment with the exact same parameter set.\n\nArguments\n\npd::{AbstractTOMLDict}: The parameter dictionary containing usage logs.\nfilepath::{AbstractString}: The path where the log file will be saved.\n\n\n\n\n\n","category":"function"},{"location":"API/#ClimaParams.check_override_parameter_usage","page":"API","title":"ClimaParams.check_override_parameter_usage","text":"check_override_parameter_usage(pd::ParamDict, strict::Bool)\n\nVerifies that all parameters supplied in an override file were actually used during the simulation by checking for the \"used_in\" log entry.\n\nArguments\n\npd::{ParamDict}: The parameter dictionary to check.\nstrict::Bool: If true, throws an error if any override parameter is unused. If false, only a warning is issued.\n\n\n\n\n\n","category":"function"},{"location":"API/#ClimaParams.log_component!","page":"API","title":"ClimaParams.log_component!","text":"log_component!(pd::ParamDict, names::NAMESTYPE, component::AbstractString)\n\nLogs that a set of parameters are used by a specific model component.\n\nThis function modifies the parameter dictionary in-place by adding or appending the component string to a \"used_in\" entry for each parameter specified in names. This is crucial for tracking which parameters are active in a simulation.\n\nArguments\n\npd::{ParamDict}: The parameter dictionary to be modified.\nnames: A vector or tuple of strings with the names of parameters to log.\ncomponent::{AbstractString}: The name of the model component using the parameters.\n\n\n\n\n\n","category":"function"},{"location":"API/#ClimaParams.create_parameter_struct","page":"API","title":"ClimaParams.create_parameter_struct","text":"create_parameter_struct(param_struct_type, toml_dict, name_map, [nested_structs])\n\nConstructs an instance of a parameter struct from a TOML dictionary.\n\nThis function retrieves all necessary parameter values using a name_map and instantiates the param_struct_type, including any nested_structs.\n\nThis function makes several assumptions about the parameter struct:\n\nIt has a constructor that accepts keyword arguments for its fields.\nIts first type parameter is the floating-point type (e.g., MyParams{FT}).\nAll nested parameter structs required by the constructor are passed via nested_structs.\n\nArguments\n\nparam_struct_type: The type of the parameter struct to be created (e.g., MyParams).\ntoml_dict::{AbstractTOMLDict}: The TOML dictionary containing the parameter values.\nname_map: A Dict or other iterable of Pairs to map TOML names to struct field names.\nnested_structs: A NamedTuple of already-constructed nested parameter structs, if any.\n\n\n\n\n\n","category":"function"}]
}
